import java.lang.Math.*;

public class MetodoJacobi implements Metodo{

	/*	Equação inicial
	
		5X' + 2X" + 2X"' = 3
		X' + 3X" + X"'	= -2
		     6X" + 8X"'	= -6	
			 
			 
		X = CX + g
		x1 = {CX}3(1/5) {X"}-2(1/5) {X"'}-2(1/5)
		X2 = {CX}-2(1/3) {X'}-1(1/3) {X"'}-1(1/3)
		23 = {CX}-6(1/8) {X"}-6(1/8)
		
			 
		X0 = (-2, - 3/2, - 6/8)
		
		E = 0,5

		X(k+1) = CX(k) + g
	
	
	*/
	
	//Declaracao de variaveis
	float x1;
	float x2;
	float x3;
	float E = 0.5f;
	float EAtual; 
	
	float[][] matriz = new float[3][3];
	float[] resultIteracaoAnt = new float[3];
	float[] resultIteracaoAtual = new float[3];
	float[] resultIteracaoComparacao = new float[3];
	
	public String aplicaMetodo(){
		//texto para mostrar o resultado
		StringBuffer exibeTexto = new StringBuffer();
		//valores iniciais X 0 he o um, ja que as matrizes em java comecam em 0 e mais ate tamanho -1 float 3 he de 0 a 2		
		resultIteracaoAnt[0] = -2f;
		resultIteracaoAnt[1] = divisao(3,2);
		resultIteracaoAnt[2] = divisao(-6,8);
		
		//monta a matriz inicial
		matriz[0][0] = divisao(3,5);//CX1
		matriz[0][1] = divisao(-2,5);//X"
		matriz[0][2] = divisao(-2,5);//X"'
		matriz[1][0] = divisao(-2,3);//CX2
		matriz[1][1] = divisao(-1,3);//X'
		matriz[1][2] = divisao(-1,3);//X"'
		matriz[2][0] = divisao(-6,8);//CX3
		matriz[2][1] = divisao(-6,8);//X"
		
		int passo = 1;
		
		exibeTexto.append("E = " + E + "\n\n");
		
		do{
		
			x1 = matriz[0][0] + matriz[0][1]*resultIteracaoAnt[1] + (matriz[0][2]*resultIteracaoAnt[2]);
			x2 = matriz[1][0] + matriz[1][1]*resultIteracaoAnt[0] + (matriz[1][2]*resultIteracaoAnt[2]);
			x3 = matriz[2][0] + matriz[2][1]*resultIteracaoAnt[1];
			
			resultIteracaoAtual[0] = x1;
			resultIteracaoAtual[1] = x2;
			resultIteracaoAtual[2] = x3;
			
			resultIteracaoComparacao[0] = Math.abs(resultIteracaoAtual[0] - resultIteracaoAnt[0]);
			resultIteracaoComparacao[1] = Math.abs(resultIteracaoAtual[1] - resultIteracaoAnt[1]);
			resultIteracaoComparacao[2] = Math.abs(resultIteracaoAtual[2] - resultIteracaoAnt[2]);
			
			float maiorXDiferencaAnt = maior(resultIteracaoComparacao);
					
			float maiorX = maiorModulo(resultIteracaoAtual.clone());		
			
			EAtual = maiorXDiferencaAnt/maiorX;
			if(EAtual > E)
				exibeTexto.append("Passo " + passo + ": \n x1 = " + x1 + ",\n x2 = " + x2 + ",\n x3 = " + x3 + ",\n Erro: " + EAtual + " > E. " + "\n\n");
			else
				exibeTexto.append("Passo " + passo + ": \n x1 = " + x1 + ",\n x2 = " + x2 + ",\n x3 = " + x3 + ",\n Erro: " + EAtual + " < E. " + "\n\n");
			
			//guarda os valores para proximo passo
			resultIteracaoAnt[0] = resultIteracaoAtual[0];
			resultIteracaoAnt[1] = resultIteracaoAtual[1];
			resultIteracaoAnt[2] = resultIteracaoAtual[2];
			
			resultIteracaoAtual[0] = 0f;
			resultIteracaoAtual[1] = 0f;
			resultIteracaoAtual[2] = 0f;
			
			passo++;
			
		}while(EAtual > E);
		return exibeTexto.toString();
	}	
	
	public float divisao(int x, int y){
		float xf = x;
		float yf = y;
		return xf/yf;
	}
	
	public float maiorModulo(float[] array){
		float maior = 0;
		for (int i=0; i < array.length; i++){
			array[i] = Math.abs(array[i]);
		}
		for (int i=1; i < array.length; i++){
			if(array[i] > array[i-1]){
				if(array[i] > maior)
					maior = array[i];
			}
			else{
				if(array[i-1] > maior)
					maior = array[i-1];
			}
		}
		return maior;
	}
	
	public float maior(float[] array){
		float maior = 0;
		for (int i=1; i < array.length; i++){
			if(array[i] > array[i-1]){
				if(array[i] > maior)
					maior = array[i];
			}
			else{
				if(array[i-1] > maior)
					maior = array[i-1];
			}
		}
		return maior;
	}

}
